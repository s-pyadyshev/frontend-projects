"use strict";

(function () {
  Element.prototype.backgroundClipPolyfill = function () {
    var a = arguments[0],
        d = document,
        b = d.body,
        el = this;

    function hasBackgroundClip() {
      return b.style.webkitBackgroundClip != undefined;
    };

    function addAttributes(el, attributes) {
      for (var key in attributes) {
        el.setAttribute(key, attributes[key]);
      }
    }

    function createSvgElement(tagname) {
      return d.createElementNS('http://www.w3.org/2000/svg', tagname);
    }

    function createSVG() {
      var a = arguments[0],
          svg = createSvgElement('svg'),
          pattern = createSvgElement('pattern'),
          image = createSvgElement('image'),
          text = createSvgElement('text');

      addAttributes(pattern, {
        'id': a.id,
        'patternUnits': 'userSpaceOnUse',
        'width': a.width,
        'height': a.height
      });

      addAttributes(image, {
        'width': a.width,
        'height': a.height
      });
      image.setAttributeNS('http://www.w3.org/1999/xlink', 'xlink:href', a.url);

      addAttributes(text, {
        'x': 0,
        'y': 80,
        'class': a.class,
        'style': 'fill:url(#' + a.id + ');'
      });

      text.textContent = a.text;

      pattern.appendChild(image);

      svg.appendChild(pattern);
      svg.appendChild(text);

      return svg;
    };

    if (!hasBackgroundClip()) {
      var img = new Image();
      img.onload = function () {
        var svg = createSVG({
          'id': a.patternID,
          'url': a.patternURL,
          'class': a.class,
          'width': this.width,
          'height': this.height,
          'text': el.textContent
        });

        el.parentNode.replaceChild(svg, el);
      };
      img.src = a.patternURL;
    }
  };

  var gradientText = document.querySelector('.yellow-gradient');

  gradientText.backgroundClipPolyfill({
    'patternID': 'mypattern',
    'patternURL': 'img/yellow-gradient.png',
    'class': 'myelement'
  });
})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyJdLCJuYW1lcyI6WyJFbGVtZW50IiwicHJvdG90eXBlIiwiYmFja2dyb3VuZENsaXBQb2x5ZmlsbCIsImEiLCJhcmd1bWVudHMiLCJkIiwiZG9jdW1lbnQiLCJiIiwiYm9keSIsImVsIiwiaGFzQmFja2dyb3VuZENsaXAiLCJzdHlsZSIsIndlYmtpdEJhY2tncm91bmRDbGlwIiwidW5kZWZpbmVkIiwiYWRkQXR0cmlidXRlcyIsImF0dHJpYnV0ZXMiLCJrZXkiLCJzZXRBdHRyaWJ1dGUiLCJjcmVhdGVTdmdFbGVtZW50IiwidGFnbmFtZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVNWRyIsInN2ZyIsInBhdHRlcm4iLCJpbWFnZSIsInRleHQiLCJpZCIsIndpZHRoIiwiaGVpZ2h0Iiwic2V0QXR0cmlidXRlTlMiLCJ1cmwiLCJjbGFzcyIsInRleHRDb250ZW50IiwiYXBwZW5kQ2hpbGQiLCJpbWciLCJJbWFnZSIsIm9ubG9hZCIsInBhdHRlcm5JRCIsInBhdHRlcm5VUkwiLCJwYXJlbnROb2RlIiwicmVwbGFjZUNoaWxkIiwic3JjIiwiZ3JhZGllbnRUZXh0IiwicXVlcnlTZWxlY3RvciJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsQ0FBQyxZQUFXO0FBQ1JBLFVBQVFDLFNBQVIsQ0FBa0JDLHNCQUFsQixHQUEyQyxZQUFZO0FBQ25ELFFBQUlDLElBQUlDLFVBQVUsQ0FBVixDQUFSO0FBQUEsUUFDSUMsSUFBSUMsUUFEUjtBQUFBLFFBRUlDLElBQUlGLEVBQUVHLElBRlY7QUFBQSxRQUdJQyxLQUFLLElBSFQ7O0FBS0EsYUFBU0MsaUJBQVQsR0FBNkI7QUFDM0IsYUFBT0gsRUFBRUksS0FBRixDQUFRQyxvQkFBUixJQUFnQ0MsU0FBdkM7QUFDRDs7QUFFRCxhQUFTQyxhQUFULENBQXVCTCxFQUF2QixFQUEyQk0sVUFBM0IsRUFBdUM7QUFDckMsV0FBSyxJQUFJQyxHQUFULElBQWdCRCxVQUFoQixFQUE0QjtBQUMxQk4sV0FBR1EsWUFBSCxDQUFnQkQsR0FBaEIsRUFBcUJELFdBQVdDLEdBQVgsQ0FBckI7QUFDRDtBQUNGOztBQUVELGFBQVNFLGdCQUFULENBQTBCQyxPQUExQixFQUFtQztBQUNqQyxhQUFPZCxFQUFFZSxlQUFGLENBQWtCLDRCQUFsQixFQUFnREQsT0FBaEQsQ0FBUDtBQUNEOztBQUVELGFBQVNFLFNBQVQsR0FBcUI7QUFDbkIsVUFBSWxCLElBQUlDLFVBQVUsQ0FBVixDQUFSO0FBQUEsVUFDSWtCLE1BQU1KLGlCQUFpQixLQUFqQixDQURWO0FBQUEsVUFFSUssVUFBVUwsaUJBQWlCLFNBQWpCLENBRmQ7QUFBQSxVQUdJTSxRQUFRTixpQkFBaUIsT0FBakIsQ0FIWjtBQUFBLFVBSUlPLE9BQU9QLGlCQUFpQixNQUFqQixDQUpYOztBQU1BSixvQkFBY1MsT0FBZCxFQUF1QjtBQUNyQixjQUFPcEIsRUFBRXVCLEVBRFk7QUFFckIsd0JBQWlCLGdCQUZJO0FBR3JCLGlCQUFVdkIsRUFBRXdCLEtBSFM7QUFJckIsa0JBQVd4QixFQUFFeUI7QUFKUSxPQUF2Qjs7QUFPQWQsb0JBQWNVLEtBQWQsRUFBcUI7QUFDbkIsaUJBQVVyQixFQUFFd0IsS0FETztBQUVuQixrQkFBV3hCLEVBQUV5QjtBQUZNLE9BQXJCO0FBSUFKLFlBQU1LLGNBQU4sQ0FBcUIsOEJBQXJCLEVBQXFELFlBQXJELEVBQW1FMUIsRUFBRTJCLEdBQXJFOztBQUVBaEIsb0JBQWNXLElBQWQsRUFBb0I7QUFDbEIsYUFBTSxDQURZO0FBRWxCLGFBQU0sRUFGWTtBQUdsQixpQkFBVXRCLEVBQUU0QixLQUhNO0FBSWxCLGlCQUFVLGVBQWU1QixFQUFFdUIsRUFBakIsR0FBc0I7QUFKZCxPQUFwQjs7QUFPQUQsV0FBS08sV0FBTCxHQUFtQjdCLEVBQUVzQixJQUFyQjs7QUFFQUYsY0FBUVUsV0FBUixDQUFvQlQsS0FBcEI7O0FBRUFGLFVBQUlXLFdBQUosQ0FBZ0JWLE9BQWhCO0FBQ0FELFVBQUlXLFdBQUosQ0FBZ0JSLElBQWhCOztBQUVBLGFBQU9ILEdBQVA7QUFDRDs7QUFFRCxRQUFJLENBQUNaLG1CQUFMLEVBQTBCO0FBQ3hCLFVBQUl3QixNQUFNLElBQUlDLEtBQUosRUFBVjtBQUNBRCxVQUFJRSxNQUFKLEdBQWEsWUFBVztBQUN0QixZQUFJZCxNQUFNRCxVQUFVO0FBQ2xCLGdCQUFPbEIsRUFBRWtDLFNBRFM7QUFFbEIsaUJBQVFsQyxFQUFFbUMsVUFGUTtBQUdsQixtQkFBVW5DLEVBQUU0QixLQUhNO0FBSWxCLG1CQUFVLEtBQUtKLEtBSkc7QUFLbEIsb0JBQVcsS0FBS0MsTUFMRTtBQU1sQixrQkFBU25CLEdBQUd1QjtBQU5NLFNBQVYsQ0FBVjs7QUFTQXZCLFdBQUc4QixVQUFILENBQWNDLFlBQWQsQ0FBMkJsQixHQUEzQixFQUFnQ2IsRUFBaEM7QUFDRCxPQVhEO0FBWUF5QixVQUFJTyxHQUFKLEdBQVV0QyxFQUFFbUMsVUFBWjtBQUNEO0FBQ0osR0F6RUQ7O0FBMkVBLE1BQUlJLGVBQWVwQyxTQUFTcUMsYUFBVCxDQUF1QixrQkFBdkIsQ0FBbkI7O0FBRUFELGVBQWF4QyxzQkFBYixDQUFvQztBQUNoQyxpQkFBYyxXQURrQjtBQUVoQyxrQkFBZSx5QkFGaUI7QUFHaEMsYUFBVTtBQUhzQixHQUFwQztBQUtILENBbkZEIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5cclxuKGZ1bmN0aW9uKCkge1xyXG4gICAgRWxlbWVudC5wcm90b3R5cGUuYmFja2dyb3VuZENsaXBQb2x5ZmlsbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgYSA9IGFyZ3VtZW50c1swXSxcclxuICAgICAgICAgICAgZCA9IGRvY3VtZW50LFxyXG4gICAgICAgICAgICBiID0gZC5ib2R5LFxyXG4gICAgICAgICAgICBlbCA9IHRoaXM7XHJcbiAgICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIGhhc0JhY2tncm91bmRDbGlwKCkge1xyXG4gICAgICAgICAgcmV0dXJuIGIuc3R5bGUud2Via2l0QmFja2dyb3VuZENsaXAgIT0gdW5kZWZpbmVkO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgXHJcbiAgICAgICAgZnVuY3Rpb24gYWRkQXR0cmlidXRlcyhlbCwgYXR0cmlidXRlcykge1xyXG4gICAgICAgICAgZm9yICh2YXIga2V5IGluIGF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgYXR0cmlidXRlc1trZXldKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgXHJcbiAgICAgICAgZnVuY3Rpb24gY3JlYXRlU3ZnRWxlbWVudCh0YWduYW1lKSB7XHJcbiAgICAgICAgICByZXR1cm4gZC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgdGFnbmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIFxyXG4gICAgICAgIGZ1bmN0aW9uIGNyZWF0ZVNWRygpIHtcclxuICAgICAgICAgIHZhciBhID0gYXJndW1lbnRzWzBdLFxyXG4gICAgICAgICAgICAgIHN2ZyA9IGNyZWF0ZVN2Z0VsZW1lbnQoJ3N2ZycpLFxyXG4gICAgICAgICAgICAgIHBhdHRlcm4gPSBjcmVhdGVTdmdFbGVtZW50KCdwYXR0ZXJuJyksXHJcbiAgICAgICAgICAgICAgaW1hZ2UgPSBjcmVhdGVTdmdFbGVtZW50KCdpbWFnZScpLFxyXG4gICAgICAgICAgICAgIHRleHQgPSBjcmVhdGVTdmdFbGVtZW50KCd0ZXh0Jyk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGFkZEF0dHJpYnV0ZXMocGF0dGVybiwge1xyXG4gICAgICAgICAgICAnaWQnIDogYS5pZCxcclxuICAgICAgICAgICAgJ3BhdHRlcm5Vbml0cycgOiAndXNlclNwYWNlT25Vc2UnLFxyXG4gICAgICAgICAgICAnd2lkdGgnIDogYS53aWR0aCxcclxuICAgICAgICAgICAgJ2hlaWdodCcgOiBhLmhlaWdodFxyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIGFkZEF0dHJpYnV0ZXMoaW1hZ2UsIHtcclxuICAgICAgICAgICAgJ3dpZHRoJyA6IGEud2lkdGgsXHJcbiAgICAgICAgICAgICdoZWlnaHQnIDogYS5oZWlnaHRcclxuICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgaW1hZ2Uuc2V0QXR0cmlidXRlTlMoJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnLCAneGxpbms6aHJlZicsIGEudXJsKTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgYWRkQXR0cmlidXRlcyh0ZXh0LCB7XHJcbiAgICAgICAgICAgICd4JyA6IDAsXHJcbiAgICAgICAgICAgICd5JyA6IDgwLFxyXG4gICAgICAgICAgICAnY2xhc3MnIDogYS5jbGFzcyxcclxuICAgICAgICAgICAgJ3N0eWxlJyA6ICdmaWxsOnVybCgjJyArIGEuaWQgKyAnKTsnXHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICAgIFxyXG4gICAgICAgICAgdGV4dC50ZXh0Q29udGVudCA9IGEudGV4dDtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICBwYXR0ZXJuLmFwcGVuZENoaWxkKGltYWdlKTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICBzdmcuYXBwZW5kQ2hpbGQocGF0dGVybik7XHJcbiAgICAgICAgICBzdmcuYXBwZW5kQ2hpbGQodGV4dCk7XHJcbiAgICAgICAgICBcclxuICAgICAgICAgIHJldHVybiBzdmc7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgICAgICBpZiAoIWhhc0JhY2tncm91bmRDbGlwKCkpIHtcclxuICAgICAgICAgIHZhciBpbWcgPSBuZXcgSW1hZ2UoKTtcclxuICAgICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgdmFyIHN2ZyA9IGNyZWF0ZVNWRyh7XHJcbiAgICAgICAgICAgICAgJ2lkJyA6IGEucGF0dGVybklELFxyXG4gICAgICAgICAgICAgICd1cmwnIDogYS5wYXR0ZXJuVVJMLFxyXG4gICAgICAgICAgICAgICdjbGFzcycgOiBhLmNsYXNzLFxyXG4gICAgICAgICAgICAgICd3aWR0aCcgOiB0aGlzLndpZHRoLFxyXG4gICAgICAgICAgICAgICdoZWlnaHQnIDogdGhpcy5oZWlnaHQsXHJcbiAgICAgICAgICAgICAgJ3RleHQnIDogZWwudGV4dENvbnRlbnRcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICBlbC5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChzdmcsIGVsKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGltZy5zcmMgPSBhLnBhdHRlcm5VUkw7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB2YXIgZ3JhZGllbnRUZXh0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnllbGxvdy1ncmFkaWVudCcpOyBcclxuXHJcbiAgICBncmFkaWVudFRleHQuYmFja2dyb3VuZENsaXBQb2x5ZmlsbCh7XHJcbiAgICAgICAgJ3BhdHRlcm5JRCcgOiAnbXlwYXR0ZXJuJyxcclxuICAgICAgICAncGF0dGVyblVSTCcgOiAnaW1nL3llbGxvdy1ncmFkaWVudC5wbmcnLFxyXG4gICAgICAgICdjbGFzcycgOiAnbXllbGVtZW50J1xyXG4gICAgfSk7XHJcbn0pKCk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
